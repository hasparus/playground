{
  "_args": [
    [
      {
        "raw": "remotedev-server",
        "scope": null,
        "escapedName": "remotedev-server",
        "name": "remotedev-server",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "R:\\Code\\playground\\voting-server"
    ]
  ],
  "_from": "remotedev-server@latest",
  "_id": "remotedev-server@0.2.2",
  "_inCache": true,
  "_location": "/remotedev-server",
  "_nodeVersion": "7.7.3",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/remotedev-server-0.2.2.tgz_1492179328862_0.6638508413452655"
  },
  "_npmUser": {
    "name": "zalmoxisus",
    "email": "zalmoxisus@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "remotedev-server",
    "scope": null,
    "escapedName": "remotedev-server",
    "name": "remotedev-server",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/remotedev-server/-/remotedev-server-0.2.2.tgz",
  "_shasum": "92494ef0e558389e12e2a8f0007ce92fc5279799",
  "_shrinkwrap": null,
  "_spec": "remotedev-server",
  "_where": "R:\\Code\\playground\\voting-server",
  "author": {
    "name": "Mihail Diordiev",
    "email": "zalmoxisus@gmail.com",
    "url": "https://github.com/zalmoxisus"
  },
  "bin": {
    "remotedev": "bin/remotedev.js"
  },
  "bugs": {
    "url": "https://github.com/zalmoxisus/remotedev-server/issues"
  },
  "dependencies": {
    "body-parser": "^1.15.0",
    "chalk": "^1.1.3",
    "cors": "^2.7.1",
    "ejs": "^2.4.1",
    "express": "^4.13.3",
    "getport": "^0.1.0",
    "js-data": "^2.9.0",
    "lodash": "^4.15.0",
    "minimist": "^1.2.0",
    "node-uuid": "^1.4.0",
    "object-assign": "^4.0.0",
    "repeat-string": "^1.5.4",
    "semver": "^5.3.0",
    "socketcluster": "^5.0.4"
  },
  "description": "Run the RemoteDev monitor on your local server.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "92494ef0e558389e12e2a8f0007ce92fc5279799",
    "tarball": "https://registry.npmjs.org/remotedev-server/-/remotedev-server-0.2.2.tgz"
  },
  "files": [
    "bin",
    "lib",
    "views"
  ],
  "gitHead": "38e81e3aadcee9a31b612f0188c952f2e3dd7d77",
  "homepage": "https://github.com/zalmoxisus/remotedev-server",
  "keywords": [
    "devtools",
    "remotedev"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "zalmoxisus",
      "email": "zalmoxisus@gmail.com"
    }
  ],
  "name": "remotedev-server",
  "optionalDependencies": {},
  "readme": "RemoteDev Server\n================\n\nBridge for communicating with an application remotely via [Redux DevTools extension](https://github.com/zalmoxisus/redux-devtools-extension), [Remote Redux DevTools](https://github.com/zalmoxisus/remote-redux-devtools) or [RemoteDev](https://github.com/zalmoxisus/remotedev). Running your server is optional, you can use [remotedev.io](https://remotedev.io) instead.\n\n### Installation\n\n```\nnpm install --save-dev remotedev-server\n```\n\nAlso [there's a docker image](https://github.com/jhen0409/docker-remotedev-server) you can use.\n\n### Usage\n\n##### Add in your app's `package.json`:\n\n```\n\"scripts\": {\n  \"remotedev\": \"remotedev --hostname=localhost --port=8000\"\n}\n```\n\nSo, you can start remotedev server by running `npm run remotedev`.\n\n##### Import in your `server.js` script you use for starting a development server:\n\n```js\nvar remotedev = require('remotedev-server');\nremotedev({ hostname: 'localhost', port: 8000 });\n```\n\nSo, you can start remotedev server together with your dev server.\n\n##### Install the package globally (not recommended) just run:\n\n```\nremotedev --hostname=localhost --port=8000\n```\n\n### Connection settings\n\nSet `hostname` and `port` to the values you want. `hostname` by default is `localhost` and `port` is `8000`.\n\nTo use WSS, set `protocol` argument to `https` and provide `key`, `cert` and `passphrase` arguments.\n\n### Inject to React Native local server\n\n##### Add in your React Native app's `package.json`:\n\n```\n\"scripts\": {\n  \"remotedev\": \"remotedev --hostname=localhost --port=8000 --injectserver=reactnative\"\n}\n```\n\nThe `injectserver` value can be `reactnative` or `macos` ([react-native-macos](https://github.com/ptmt/react-native-macos)), it used `reactnative` by default.\n\nThen, we can start React Native server and RemoteDev server with one command (`npm start`).\n\n##### Revert the injection\n\nAdd in your React Native app's `package.json`:\n\n```\n\"scripts\": {\n  \"remotedev-revert\": \"remotedev --revert=reactnative\"\n}\n```\n\nOr just run `$(npm bin)/remotedev --revert`.\n\n### Connect from Android device or emulator\n\n> Note that if you're using `injectserver` argument explained above, this step is not necessary. \n\nIf you're running an Android 5.0+ device connected via USB or an Android emulator, use [adb command line tool](http://developer.android.com/tools/help/adb.html) to setup port forwarding from the device to your computer:\n\n```\nadb reverse tcp:8000 tcp:8000\n```\n\nIf you're still use Android 4.0, you should use `10.0.2.2` (Genymotion: `10.0.3.2`) instead of `localhost` in [remote-redux-devtools](https://github.com/zalmoxisus/remote-redux-devtools#storeconfigurestorejs) or [remotedev](https://github.com/zalmoxisus/remotedev#usage).\n\n### Save reports and logs\n\nYou can store reports via [`redux-remotedev`](https://github.com/zalmoxisus/redux-remotedev) and get them replicated with [Redux DevTools extension](https://github.com/zalmoxisus/redux-devtools-extension) or [Remote Redux DevTools](https://github.com/zalmoxisus/remote-redux-devtools). You can get action history right in the extension just by clicking the link from a report.\n\nRemotedev server is database agnostic. By default everything is stored in the memory, but you can persist data by specifying one of the jsData adapters above for `adapter` argument. Also you can add an `dbOptions` argument for database configuration. If not provided the default options will be used (for some adapters, like `sql`, it's required). You have to install the required adapter's npm package.\n\n| Storage   | `adapter` | `dbOptions` argument example (optional)                                                                                | install                                              |\n|-----------|-----------|------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------|\n| Firebase  | firebase  | `{ basePath: 'https://my-app.firebase.io' }`                                                                           | `npm install --save js-data-firebase`                |\n| HTTP      | http      | `{ basePath: 'https://my-rest-server/api' }`                                                                           | `npm install --save js-data-http`                    |\n| LevelUp   | levelup   | `'./db'` (the levelup \"db\" object will be available at \"adapter.db\")                                                   | `npm install --save js-data-levelup`                 |\n| MongoDB   | mongodb   | `{ name: 'user', idAttribute: '_id', table: 'users' }`                                                                 | `npm install --save js-data-mongodb`                 |\n| MySQL     | sql       | `{ client: 'mysql', connection: { host: '123.45.67.890', user: 'ubuntu', password: 'welcome1234', database: 'db1' }`   | `npm install --save js-data-sql`                     |\n| Postgres  | sql       | `{ client: 'pg', connection: { host: '123.45.67.890', user: 'ubuntu', password: 'welcome1234', database: 'db1' }`      | `npm install --save js-data-sql`                     |\n| Redis     | redis     | See the configurable options for [`node_redis`](https://github.com/NodeRedis/node_redis)                               | `npm install --save js-data-redis`                   |\n| RethinkDB | rethinkdb | `{ host: '123.456.68.987', db: 'my_db' }`                                                                              | `npm install --save rethinkdbdash js-data-rethinkdb` |\n| SQLite3   | sql       | `{ client: 'sqlite3', connection: { host: '123.45.67.890', user: 'ubuntu', password: 'welcome1234', database: 'db1' }` | `npm install --save js-data-sql`                     |\n\nImplement a [custom adapter for JSData](http://www.js-data.io/docs/working-with-adapters#custom-adapters).\n\n### License \n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zalmoxisus/remotedev-server.git"
  },
  "scripts": {},
  "version": "0.2.2"
}
